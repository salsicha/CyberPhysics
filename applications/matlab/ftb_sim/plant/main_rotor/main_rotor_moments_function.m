function mom_Nm = main_rotor_moments_function(omega_mr_radps, B1_mr_rad, A1_mr_rad, thrust_N, v_i_mps, ...
                                              v_ned_mps, as_mps, a1s_rad, b1s_rad, ...
                                              mr_rotor_forces_N, rho_kgpm3, params, universal_constants)
%MAIN_ROTOR_MOMENTS_FUNCTION Computes moments in body axis generated by the
%main rotor
%
%Inputs:
%omega_mr_radps                 : Main rotor angular velocity
%B1_mr_rad                      : Cyclic pitch input
%A1_mr_rad                      : Cyclic roll input
%thrust_N                       : Main rotor thrust
%v_i_mps                        : Induced velocity at main rotor
%v_ned_mps                      : NED velocity
%as_mps                         : Airspeed vector in body axis
%a1s_rad                        : Longitudinal flap angle
%b1s_rad                        : Lateral flap angle
%main_rotor_forces_N            : Forces due to main rotor in body axis
%rho_kgpm3                      : Altitude corrected air density
%params                         : Vehicle parameters struct
%universal_constants            : Structure with universal constants
%
%Outputs:
%mom_Nm                         : Moments in body axis due to main rotor

% Rotor dir, 1 for CCW and -1 for CC
lambda = params.main_rotor.rotor_dir;

% Main rotor radius
r_mr_m = params.main_rotor.r_mr_m;

% Mean blade chord length
c_m = params.main_rotor.c_m;

% Mean profile drag coefficient
cd0 =  params.main_rotor.cd0;

% Num blades
num_blades = params.main_rotor.num_blades;

% Blade linkage cross-coupling
K1 = params.main_rotor.K1;

% Flap hing offset from the hub
e_mr_m = params.main_rotor.hinge_offset_mr_m;

% Lift curve slope
a = params.main_rotor.lift_curve_slope;

% Vertical and horizontal offset of main hub w.r.t CG in body axis
h_hub_m = params.main_rotor.h_hub_m;
d_hub_m = params.main_rotor.d_hub_m;

% Lock number
gamma_mr = rho_kgpm3*params.main_rotor.gamma_mr;

% Gravity
g = universal_constants.g_mps2;

% Airspeed in body frame
u = as_mps(1);
v = as_mps(2);
w = as_mps(3);

% Compute profile power
p_profile = (1/8)*rho_kgpm3*cd0*num_blades*c_m*r_mr_m^2* ...
            omega_mr_radps*( (r_mr_m*omega_mr_radps)^2 + 4.6*(u^2 + v^2) );
% Compute induce drag power
p_i = thrust_N*v_i_mps;

% Climb power
p_c = params.mass_kg*g*v_ned_mps(3);

% Parsitic power to overcome fuselage drag, set to 0 for now
%p_pa = -(X_Fus*u) - (Y_Fus*v) - (Z_Fus*(w - v_i_mps));
p_pa = 0;

p_total = p_profile + p_i + p_c + p_pa;
main_rotor_tq_Nm = p_total/omega_mr_radps;

%Compute moments
yaw_moment_Nm = lambda*main_rotor_tq_Nm;

% Main rotor forces
fx = mr_rotor_forces_N(1);
fy = mr_rotor_forces_N(2);
fz = mr_rotor_forces_N(3);

dL_dA1 = (1/12)*num_blades*rho_kgpm3*a*c_m*r_mr_m*e_mr_m*(r_mr_m * omega_mr_radps)^2;
dM_dB1 = dL_dA1;

dL_db1s = lambda*9*dL_dA1/gamma_mr;
dM_da1s = dL_db1s;

roll_moment_Nm = fy*h_hub_m + dL_db1s*b1s_rad + lambda*dL_dA1*(a1s_rad + A1_mr_rad - K1*b1s_rad);
pitch_moment_Nm = fz*d_hub_m - fx*h_hub_m + dM_da1s*a1s_rad +  lambda*dM_dB1*(-b1s_rad + B1_mr_rad - K1*a1s_rad);

mom_Nm = [roll_moment_Nm; pitch_moment_Nm; yaw_moment_Nm];


end

